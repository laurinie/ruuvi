[{"/Users/225927/own/projects/ruuvi/src/index.tsx":"1","/Users/225927/own/projects/ruuvi/src/reportWebVitals.ts":"2","/Users/225927/own/projects/ruuvi/src/App.tsx":"3","/Users/225927/own/projects/ruuvi/src/utils.ts":"4","/Users/225927/own/projects/ruuvi/src/context/data.ts":"5","/Users/225927/own/projects/ruuvi/src/api/data.ts":"6","/Users/225927/own/projects/ruuvi/src/components/Updated.tsx":"7","/Users/225927/own/projects/ruuvi/src/components/LatestByTag.tsx":"8","/Users/225927/own/projects/ruuvi/src/components/Humidity.tsx":"9","/Users/225927/own/projects/ruuvi/src/components/Temperature.tsx":"10","/Users/225927/own/projects/ruuvi/src/components/Battery.tsx":"11","/Users/225927/own/projects/ruuvi/src/components/Tags.tsx":"12","/Users/225927/own/projects/ruuvi/src/components/Navigation.tsx":"13","/Users/225927/own/projects/ruuvi/src/components/TagPage.tsx":"14","/Users/225927/own/projects/ruuvi/src/components/Groups.tsx":"15","/Users/225927/own/projects/ruuvi/src/components/Group.tsx":"16"},{"size":762,"mtime":1620927590406,"results":"17","hashOfConfig":"18"},{"size":425,"mtime":1609766818536,"results":"19","hashOfConfig":"18"},{"size":1769,"mtime":1621008998758,"results":"20","hashOfConfig":"18"},{"size":1127,"mtime":1609766818537,"results":"21","hashOfConfig":"18"},{"size":151,"mtime":1609766818535,"results":"22","hashOfConfig":"18"},{"size":839,"mtime":1620932617690,"results":"23","hashOfConfig":"18"},{"size":396,"mtime":1609766818535,"results":"24","hashOfConfig":"18"},{"size":1119,"mtime":1609766818534,"results":"25","hashOfConfig":"18"},{"size":1673,"mtime":1609766818534,"results":"26","hashOfConfig":"18"},{"size":1688,"mtime":1609766818534,"results":"27","hashOfConfig":"18"},{"size":1577,"mtime":1609766818534,"results":"28","hashOfConfig":"18"},{"size":5723,"mtime":1620998334904,"results":"29","hashOfConfig":"18"},{"size":1382,"mtime":1621015667185,"results":"30","hashOfConfig":"18"},{"size":4221,"mtime":1621012809310,"results":"31","hashOfConfig":"18"},{"size":3591,"mtime":1621008660899,"results":"32","hashOfConfig":"18"},{"size":5195,"mtime":1621013136518,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1crf3qu",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"36"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"36"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"36"},"/Users/225927/own/projects/ruuvi/src/index.tsx",[],["74","75"],"/Users/225927/own/projects/ruuvi/src/reportWebVitals.ts",[],"/Users/225927/own/projects/ruuvi/src/App.tsx",["76","77"],"import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Tags from './components/Tags';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport Navigation from './components/Navigation';\nimport TagPage from './components/TagPage';\nimport Groups from './components/Groups';\nimport Group from './components/Group';\n\n\nfunction App() {\n\n  // const [data, setData] = useState<ContextData | null>(null);\n  // const [refreshInterval, setRefreshInterval] = useState(15000);\n\n  // function getData() {\n\n  //   //   apiGetData(id)\n  //   //     .then(json => {\n  //   //       setData({\n  //   //         updated: new Date().toLocaleString('fi-FI'),\n  //   //         dataPoints: sortByTime(json.Items, 'desc')\n  //   //       })\n  //   //     })\n  // }\n\n  // useEffect(() => {\n  //   if (!data) {\n  //     getData()\n  //   }\n  // }, [data])\n\n  // useEffect(() => {\n  //   if (refreshInterval && refreshInterval > 0) {\n  //     const interval = setInterval(getData, refreshInterval);\n  //     return () => clearInterval(interval);\n  //   }\n  // }, [refreshInterval]);\n\n\n  return (\n    // <DataContext.Provider value={data}>\n      <Router>\n        <div className=\"App\">\n          <Switch>\n            <Route path=\"/hallinta\">\n              <Tags enableSave />\n            </Route>\n            <Route path=\"/ryhmat\">\n              <Groups/>\n            </Route>\n            <Route path=\"/ryhma/:name\" component={Group}>\n            </Route>\n            <Route path=\"/tag/:id\" component={TagPage}>\n            </Route>\n            <Route path=\"/\">\n              <Tags />\n            </Route>\n          </Switch>\n          <Navigation />\n        </div>\n      </Router>\n\n    // </DataContext.Provider>\n  );\n}\n\nexport default App;\n","/Users/225927/own/projects/ruuvi/src/utils.ts",[],["78","79"],"/Users/225927/own/projects/ruuvi/src/context/data.ts",[],["80","81"],"/Users/225927/own/projects/ruuvi/src/api/data.ts",[],"/Users/225927/own/projects/ruuvi/src/components/Updated.tsx",[],"/Users/225927/own/projects/ruuvi/src/components/LatestByTag.tsx",["82"],"/Users/225927/own/projects/ruuvi/src/components/Humidity.tsx",[],"/Users/225927/own/projects/ruuvi/src/components/Temperature.tsx",[],"/Users/225927/own/projects/ruuvi/src/components/Battery.tsx",[],"/Users/225927/own/projects/ruuvi/src/components/Tags.tsx",["83","84","85","86","87","88","89","90","91","92"],"import * as React from 'react';\nimport { Avatar, Button, Card, CardContent, Chip, CircularProgress, IconButton, List, ListItem, ListItemAvatar, ListItemText, TextField, Typography } from '@material-ui/core';\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\nimport TagIcon from '@material-ui/icons/LocalOffer';\nimport SaveIcon from '@material-ui/icons/Save';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport { useEffect, useState } from 'react';\nimport { apiAddTag, apiGetData, apiGetTags } from '../api/data';\nimport { DataPoint, Tag } from '../types/dataTypes';\nimport { deepOrange, deepPurple } from '@material-ui/core/colors';\nimport { Link } from 'react-router-dom';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            width: '100%',\n            maxWidth: 360,\n            backgroundColor: theme.palette.background.paper,\n        },\n        list:{\n            width:'100%'\n        },\n        link:{\n            textDecoration:'none',\n            width: '100%'\n        },\n        orange: {\n            color: theme.palette.getContrastText(deepOrange[500]),\n            backgroundColor: deepOrange[500],\n        },\n        purple: {\n            color: theme.palette.getContrastText(deepPurple[500]),\n            backgroundColor: deepPurple[500],\n        },\n    }),\n);\n\ninterface Props {\n    enableSave?: boolean\n}\n\nfunction Tags({ enableSave }: Props) {\n    const classes = useStyles();\n    const [tags, setTags] = useState<Tag[]>()\n    const [name, setName] = useState<string>(\"\")\n    const [id, setId] = useState<string>(\"\")\n    const [group, setGroup] = useState<string>(\"\")\n    const [isLoading, setIsLoading] = useState<boolean>(false)\n\n\n    function handelSave() {\n        setIsLoading(true)\n        apiAddTag({ id, name, group }).then(() => {\n            fetchTags()\n        }).finally(() => setIsLoading(false))\n    }\n    function fetchTags() {\n        setIsLoading(true)\n        apiGetTags().then((data) => {\n            let tagsAndData = data\n            Promise.all(tagsAndData.map(async (tag) => {\n                await fetchTagDataById(tag.id).then((latest) => {\n                    tag.data = [latest]\n                })\n            })).then(() => setTags(tagsAndData))\n        }).finally(() => setIsLoading(false))\n    }\n\n    async function fetchTagDataById(id: string): Promise<DataPoint> {\n\n        return apiGetData(id).then(data => {\n            return data.Items.pop()\n        })\n    }\n\n    useEffect(() => {\n        fetchTags()\n    }, [])\n\n\n    return (\n        <>\n            <IconButton aria-label=\"refresh\" onClick={fetchTags}>\n                {isLoading ?\n                    <CircularProgress /> :\n                    <RefreshIcon />\n                }\n            </IconButton>\n\n            <List className={classes.list}>\n                {tags?.map(({ name, id, group, data }) => (\n                    <ListItem key={id}>\n                        <Link to={`/tag/${id}`} className={classes.link}>\n                            <Card >\n                                <CardContent>\n                                    <Typography color=\"textSecondary\">\n                                        {`${id} - ${group}`}\n                                    </Typography>\n                                    <Typography variant='h5'>\n                                        {name}\n                                    </Typography>\n                                    <Chip\n                                        avatar={\n                                            <Avatar className={classes.orange}>°C</Avatar>\n                                        }\n                                        label={data && data[0]?.temperature.toPrecision(3) || '-'}\n                                        variant=\"outlined\"\n                                    />\n                                    <Chip\n                                        avatar={\n                                            <Avatar className={classes.purple}>%</Avatar>\n                                        }\n                                        label={data && data[0]?.humidity.toPrecision(3) || '-'}\n                                        variant=\"outlined\"\n                                    />\n                                    <Typography variant=\"body2\" component=\"p\">\n                                        {data && new Date(data[0]?.updated).toLocaleString() || '-'}\n                                    </Typography>\n                                </CardContent>\n                            </Card>\n                        </Link>\n                    </ListItem>\n                ))}\n            </List>\n\n            {enableSave &&\n                <div style={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    maxWidth: 300,\n                    gap: 15\n                }}>\n                    <TextField id=\"name\" label=\"Nimi\" variant=\"outlined\" value={name} onChange={({ target }) => setName(target.value)} />\n                    <TextField id=\"id\" label=\"ID\" variant=\"outlined\" value={id} onChange={({ target }) => setId(target.value)} />\n                    <TextField id=\"group\" label=\"Ryhmä\" variant=\"outlined\" value={group} onChange={({ target }) => setGroup(target.value)} />\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        size=\"large\"\n                        startIcon={<SaveIcon />}\n                        onClick={handelSave}\n                    >\n                        Tallenna\n                </Button>\n                </div>\n            }\n        </>\n    )\n}\n\nexport default Tags;","/Users/225927/own/projects/ruuvi/src/components/Navigation.tsx",["93"],"/Users/225927/own/projects/ruuvi/src/components/TagPage.tsx",["94"],"import * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport { apiGetData, apiGetTags } from '../api/data';\nimport { DataPoint, Tag } from '../types/dataTypes';\nimport { Line } from 'react-chartjs-2';\nimport { CircularProgress, IconButton, Typography } from '@material-ui/core';\nimport RefreshIcon from '@material-ui/icons/Refresh';\n\nfunction TagPage({ match }: any) {\n\n    const [dataPoints, setDataPoints] = useState<DataPoint[]>()\n    const [tagDetails, setTagDetails] = useState<Tag>()\n    const [isLoading, setIsLoading] = useState<boolean>(false)\n    const tagId = match.params.id\n\n    const tempState = {\n        labels: dataPoints?.map(({ updated }) => new Date(updated).toLocaleString()),\n        datasets: [\n            {\n                label: 'Lämpötila',\n                fill: false,\n                lineTension: 0.5,\n                backgroundColor: 'rgba(75,192,192,1)',\n                borderColor: '#00c3ff',\n                borderWidth: 2,\n                data: dataPoints?.map(({ temperature }) => temperature)\n            }\n        ]\n    }\n\n    const humState = {\n        labels: dataPoints?.map(({ updated }) => new Date(updated).toLocaleString()),\n        datasets: [\n            {\n                label: 'Kosteus',\n                fill: false,\n                lineTension: 0.5,\n                backgroundColor: '#c0b44b',\n                borderColor: '#d0ff00',\n                borderWidth: 2,\n                data: dataPoints?.map(({ humidity }) => humidity)\n            }\n        ]\n    }\n\n    const voltState = {\n        labels: dataPoints?.map(({ updated }) => new Date(updated).toLocaleString()),\n        datasets: [\n            {\n                label: 'Jännite',\n                fill: false,\n                lineTension: 0.5,\n                backgroundColor: '#b24bc0',\n                borderColor: '#cc00ff',\n                borderWidth: 2,\n                data: dataPoints?.map(({ voltage }) => voltage)\n            }\n        ]\n    }\n\n    function fetchTagDataById(id: string) {\n        setIsLoading(true)\n        return apiGetData(id).then(data => {\n            setDataPoints(data.Items)\n        }).finally(() => setIsLoading(false))\n    }\n\n    function fetchTags() {\n        apiGetTags().then((data) => {\n            setTagDetails(data.find(({ id }) => id === tagId))\n        })\n    }\n\n    useEffect(() => {\n        fetchTagDataById(tagId)\n        fetchTags()\n    }, [])\n\n\n    return (\n        <>\n            <IconButton aria-label=\"refresh\" onClick={() => fetchTagDataById(tagId)}>\n                {isLoading ?\n                    <CircularProgress /> :\n                    <RefreshIcon />\n                }\n            </IconButton>\n            <Typography variant='h3'>{tagDetails?.name}</Typography>\n            <Typography variant='caption'>{tagDetails?.group}</Typography>\n            <Line\n                data={tempState}\n                type={'line'}\n                options={{\n                    title: {\n                        display: true,\n                        text: 'Lämpötila',\n                        fontSize: 20\n                    },\n                    legend: {\n                        display: true,\n                        position: 'right'\n                    },\n                }}\n            />\n            <Line\n                data={humState}\n                type={'line'}\n                options={{\n                    title: {\n                        display: true,\n                        text: 'Kosteus',\n                        fontSize: 20\n                    },\n                    legend: {\n                        display: true,\n                        position: 'right'\n                    },\n                }}\n            />\n            <Line\n                data={voltState}\n                type={'line'}\n                options={{\n                    title: {\n                        display: true,\n                        text: 'Jännite',\n                        fontSize: 20\n                    },\n                    legend: {\n                        display: true,\n                        position: 'right'\n                    },\n                }}\n            />\n        </>\n    )\n}\n\nexport default TagPage;","/Users/225927/own/projects/ruuvi/src/components/Groups.tsx",["95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110"],"import * as React from 'react';\nimport { Avatar, Button, Card, CardContent, Chip, CircularProgress, IconButton, List, ListItem, ListItemAvatar, ListItemText, TextField, Typography } from '@material-ui/core';\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\nimport TagIcon from '@material-ui/icons/LocalOffer';\nimport SaveIcon from '@material-ui/icons/Save';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport { useEffect, useState } from 'react';\nimport { apiAddTag, apiGetData, apiGetTags } from '../api/data';\nimport { DataPoint, Tag } from '../types/dataTypes';\nimport { deepOrange, deepPurple } from '@material-ui/core/colors';\nimport { Link } from 'react-router-dom';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            width: '100%',\n            maxWidth: 360,\n            backgroundColor: theme.palette.background.paper,\n        },\n        list: {\n            width: '100%'\n        },\n        link: {\n            textDecoration: 'none',\n            width: '100%'\n        },\n        orange: {\n            color: theme.palette.getContrastText(deepOrange[500]),\n            backgroundColor: deepOrange[500],\n        },\n        purple: {\n            color: theme.palette.getContrastText(deepPurple[500]),\n            backgroundColor: deepPurple[500],\n        },\n    }),\n);\n\ninterface Props {\n    enableSave?: boolean\n}\n\nfunction Groups({ enableSave }: Props) {\n    const classes = useStyles();\n    const [tags, setTags] = useState<Tag[]>()\n    const [name, setName] = useState<string>(\"\")\n    const [id, setId] = useState<string>(\"\")\n    const [groups, setGroups] = useState<any>()\n    const [isLoading, setIsLoading] = useState<boolean>(false)\n\n    function fetchTags() {\n        setIsLoading(true)\n        apiGetTags().then((data) => {\n            const grouped = groupBy(data, \"group\")\n            console.log(grouped)\n            let listOfGroups = []\n            for (const g in grouped) {\n\n                listOfGroups.push({ name: g, data: grouped[g] })\n            }\n            setGroups(listOfGroups)\n        }).finally(() => setIsLoading(false))\n    }\n\n    const groupBy = (items: any, key: any) => items.reduce(\n        (result: any, item: any) => ({\n            ...result,\n            [item[key]]: [\n                ...(result[item[key]] || []),\n                item,\n            ],\n        }),\n        {},\n    );\n\n    useEffect(() => {\n        fetchTags()\n    }, [])\n    console.log(groups)\n\n    return (\n        <>\n            <IconButton aria-label=\"refresh\" onClick={fetchTags}>\n                {isLoading ?\n                    <CircularProgress /> :\n                    <RefreshIcon />\n                }\n            </IconButton>\n\n            <List className={classes.list}>\n                {groups?.map(({ name, data }: any) => (\n                    <ListItem key={name}>\n                        <Link to={`/ryhma/${name}`} className={classes.link}>\n                            <Card >\n                                <CardContent>\n                                    <Typography variant='h5'>\n                                        {name}\n                                    </Typography>\n                                    {data.map((d: DataPoint) =>\n                                        <Chip label={d.name} />\n                                    )}\n                                </CardContent>\n                            </Card>\n                        </Link>\n                    </ListItem>\n                ))}\n            </List>\n        </>\n    )\n}\n\nexport default Groups;","/Users/225927/own/projects/ruuvi/src/components/Group.tsx",["111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132"],"import * as React from 'react';\nimport { Avatar, Button, Card, CardContent, Chip, CircularProgress, IconButton, List, ListItem, ListItemAvatar, ListItemText, TextField, Typography } from '@material-ui/core';\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\nimport TagIcon from '@material-ui/icons/LocalOffer';\nimport SaveIcon from '@material-ui/icons/Save';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport { useEffect, useState } from 'react';\nimport { apiAddTag, apiGetData, apiGetTags } from '../api/data';\nimport { DataPoint, Tag } from '../types/dataTypes';\nimport { deepOrange, deepPurple, green } from '@material-ui/core/colors';\nimport { Link } from 'react-router-dom';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            width: '100%',\n            maxWidth: 360,\n            backgroundColor: theme.palette.background.paper,\n        },\n        list: {\n            width: '100%'\n        },\n        link: {\n            textDecoration: 'none',\n            width: '100%'\n        },\n        orange: {\n            color: theme.palette.getContrastText(deepOrange[500]),\n            backgroundColor: deepOrange[500],\n        },\n        purple: {\n            color: theme.palette.getContrastText(deepPurple[500]),\n            backgroundColor: deepPurple[500],\n        },\n        green: {\n            color: theme.palette.getContrastText(green[500]),\n            backgroundColor: green[500],\n        },\n    }),\n);\n\n\nfunction Group({ match }: any) {\n    const classes = useStyles();\n    const [tags, setTags] = useState<Tag[]>()\n    const [name, setName] = useState<string>(\"\")\n    const [id, setId] = useState<string>(\"\")\n    const [group, setGroup] = useState<string>(\"\")\n    const [isLoading, setIsLoading] = useState<boolean>(false)\n    const groupName = match.params.name\n\n    function fetchTags() {\n        setIsLoading(true)\n        apiGetTags().then((data) => {\n            let tagsAndData = data.filter(({ group }) => group === groupName)\n            Promise.all(tagsAndData.map(async (tag) => {\n                await fetchTagDataById(tag.id).then((latest) => {\n                    tag.data = [latest]\n                })\n            })).then(() => setTags(tagsAndData))\n        }).finally(() => setIsLoading(false))\n    }\n\n    async function fetchTagDataById(id: string): Promise<DataPoint> {\n\n        return apiGetData(id).then(data => {\n            return data.Items.pop()\n        })\n    }\n\n    useEffect(() => {\n        fetchTags()\n    }, [])\n\n\n    return (\n        <>\n            <IconButton aria-label=\"refresh\" onClick={fetchTags}>\n                {isLoading ?\n                    <CircularProgress /> :\n                    <RefreshIcon />\n                }\n            </IconButton>\n            <Typography variant='h2'>{groupName}</Typography>\n            <List className={classes.list}>\n                {tags?.map(({ name, id, group, data }) => (\n                    <ListItem key={id}>\n                        <Link to={`/tag/${id}`} className={classes.link}>\n                            <Card >\n                                <CardContent>\n                                    <Typography color=\"textSecondary\">\n                                        {`${id} - ${group}`}\n                                    </Typography>\n                                    <Typography variant='h5'>\n                                        {name}\n                                    </Typography>\n                                    <Chip\n                                        avatar={\n                                            <Avatar className={classes.orange}>°C</Avatar>\n                                        }\n                                        label={data && data[0]?.temperature.toPrecision(3) || '-'}\n                                        variant=\"outlined\"\n                                    />\n                                    <Chip\n                                        avatar={\n                                            <Avatar className={classes.purple}>%</Avatar>\n                                        }\n                                        label={data && data[0]?.humidity.toPrecision(3) || '-'}\n                                        variant=\"outlined\"\n                                    />\n                                    <Chip\n                                        avatar={\n                                            <Avatar className={classes.green}>V</Avatar>\n                                        }\n                                        label={data && data[0]?.voltage.toPrecision(3) || '-'}\n                                        variant=\"outlined\"\n                                    />\n                                    <Typography variant=\"body2\" component=\"p\">\n                                        {data && new Date(data[0]?.updated).toLocaleString() || '-'}\n                                    </Typography>\n                                </CardContent>\n                            </Card>\n                        </Link>\n                    </ListItem>\n                ))}\n            </List>\n        </>\n    )\n}\n\nexport default Group;",{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","replacedBy":"136"},{"ruleId":"137","severity":1,"message":"138","line":1,"column":17,"nodeType":"139","messageId":"140","endLine":1,"endColumn":26},{"ruleId":"137","severity":1,"message":"141","line":1,"column":28,"nodeType":"139","messageId":"140","endLine":1,"endColumn":36},{"ruleId":"133","replacedBy":"142"},{"ruleId":"135","replacedBy":"143"},{"ruleId":"133","replacedBy":"144"},{"ruleId":"135","replacedBy":"145"},{"ruleId":"146","severity":1,"message":"147","line":19,"column":8,"nodeType":"148","endLine":19,"endColumn":14,"suggestions":"149"},{"ruleId":"137","severity":1,"message":"150","line":2,"column":97,"nodeType":"139","messageId":"140","endLine":2,"endColumn":111},{"ruleId":"137","severity":1,"message":"151","line":2,"column":113,"nodeType":"139","messageId":"140","endLine":2,"endColumn":125},{"ruleId":"137","severity":1,"message":"152","line":4,"column":8,"nodeType":"139","messageId":"140","endLine":4,"endColumn":15},{"ruleId":"146","severity":1,"message":"153","line":79,"column":8,"nodeType":"148","endLine":79,"endColumn":10,"suggestions":"154"},{"ruleId":"155","severity":1,"message":"156","line":107,"column":53,"nodeType":"157","messageId":"158","endLine":107,"endColumn":55},{"ruleId":"155","severity":1,"message":"156","line":107,"column":92,"nodeType":"157","messageId":"158","endLine":107,"endColumn":94},{"ruleId":"155","severity":1,"message":"156","line":114,"column":53,"nodeType":"157","messageId":"158","endLine":114,"endColumn":55},{"ruleId":"155","severity":1,"message":"156","line":114,"column":89,"nodeType":"157","messageId":"158","endLine":114,"endColumn":91},{"ruleId":"155","severity":1,"message":"156","line":118,"column":47,"nodeType":"157","messageId":"158","endLine":118,"endColumn":49},{"ruleId":"155","severity":1,"message":"156","line":118,"column":94,"nodeType":"157","messageId":"158","endLine":118,"endColumn":96},{"ruleId":"137","severity":1,"message":"159","line":6,"column":8,"nodeType":"139","messageId":"140","endLine":6,"endColumn":20},{"ruleId":"146","severity":1,"message":"160","line":77,"column":8,"nodeType":"148","endLine":77,"endColumn":10,"suggestions":"161"},{"ruleId":"137","severity":1,"message":"162","line":2,"column":10,"nodeType":"139","messageId":"140","endLine":2,"endColumn":16},{"ruleId":"137","severity":1,"message":"163","line":2,"column":18,"nodeType":"139","messageId":"140","endLine":2,"endColumn":24},{"ruleId":"137","severity":1,"message":"150","line":2,"column":97,"nodeType":"139","messageId":"140","endLine":2,"endColumn":111},{"ruleId":"137","severity":1,"message":"151","line":2,"column":113,"nodeType":"139","messageId":"140","endLine":2,"endColumn":125},{"ruleId":"137","severity":1,"message":"164","line":2,"column":127,"nodeType":"139","messageId":"140","endLine":2,"endColumn":136},{"ruleId":"137","severity":1,"message":"152","line":4,"column":8,"nodeType":"139","messageId":"140","endLine":4,"endColumn":15},{"ruleId":"137","severity":1,"message":"165","line":5,"column":8,"nodeType":"139","messageId":"140","endLine":5,"endColumn":16},{"ruleId":"137","severity":1,"message":"166","line":8,"column":10,"nodeType":"139","messageId":"140","endLine":8,"endColumn":19},{"ruleId":"137","severity":1,"message":"167","line":8,"column":21,"nodeType":"139","messageId":"140","endLine":8,"endColumn":31},{"ruleId":"137","severity":1,"message":"168","line":45,"column":12,"nodeType":"139","messageId":"140","endLine":45,"endColumn":16},{"ruleId":"137","severity":1,"message":"169","line":45,"column":18,"nodeType":"139","messageId":"140","endLine":45,"endColumn":25},{"ruleId":"137","severity":1,"message":"170","line":46,"column":12,"nodeType":"139","messageId":"140","endLine":46,"endColumn":16},{"ruleId":"137","severity":1,"message":"171","line":46,"column":18,"nodeType":"139","messageId":"140","endLine":46,"endColumn":25},{"ruleId":"137","severity":1,"message":"172","line":47,"column":12,"nodeType":"139","messageId":"140","endLine":47,"endColumn":14},{"ruleId":"137","severity":1,"message":"173","line":47,"column":16,"nodeType":"139","messageId":"140","endLine":47,"endColumn":21},{"ruleId":"146","severity":1,"message":"153","line":78,"column":8,"nodeType":"148","endLine":78,"endColumn":10,"suggestions":"174"},{"ruleId":"137","severity":1,"message":"163","line":2,"column":18,"nodeType":"139","messageId":"140","endLine":2,"endColumn":24},{"ruleId":"137","severity":1,"message":"150","line":2,"column":97,"nodeType":"139","messageId":"140","endLine":2,"endColumn":111},{"ruleId":"137","severity":1,"message":"151","line":2,"column":113,"nodeType":"139","messageId":"140","endLine":2,"endColumn":125},{"ruleId":"137","severity":1,"message":"164","line":2,"column":127,"nodeType":"139","messageId":"140","endLine":2,"endColumn":136},{"ruleId":"137","severity":1,"message":"152","line":4,"column":8,"nodeType":"139","messageId":"140","endLine":4,"endColumn":15},{"ruleId":"137","severity":1,"message":"165","line":5,"column":8,"nodeType":"139","messageId":"140","endLine":5,"endColumn":16},{"ruleId":"137","severity":1,"message":"166","line":8,"column":10,"nodeType":"139","messageId":"140","endLine":8,"endColumn":19},{"ruleId":"137","severity":1,"message":"170","line":47,"column":12,"nodeType":"139","messageId":"140","endLine":47,"endColumn":16},{"ruleId":"137","severity":1,"message":"171","line":47,"column":18,"nodeType":"139","messageId":"140","endLine":47,"endColumn":25},{"ruleId":"137","severity":1,"message":"172","line":48,"column":12,"nodeType":"139","messageId":"140","endLine":48,"endColumn":14},{"ruleId":"137","severity":1,"message":"173","line":48,"column":16,"nodeType":"139","messageId":"140","endLine":48,"endColumn":21},{"ruleId":"137","severity":1,"message":"175","line":49,"column":12,"nodeType":"139","messageId":"140","endLine":49,"endColumn":17},{"ruleId":"137","severity":1,"message":"176","line":49,"column":19,"nodeType":"139","messageId":"140","endLine":49,"endColumn":27},{"ruleId":"146","severity":1,"message":"153","line":74,"column":8,"nodeType":"148","endLine":74,"endColumn":10,"suggestions":"177"},{"ruleId":"155","severity":1,"message":"156","line":102,"column":53,"nodeType":"157","messageId":"158","endLine":102,"endColumn":55},{"ruleId":"155","severity":1,"message":"156","line":102,"column":92,"nodeType":"157","messageId":"158","endLine":102,"endColumn":94},{"ruleId":"155","severity":1,"message":"156","line":109,"column":53,"nodeType":"157","messageId":"158","endLine":109,"endColumn":55},{"ruleId":"155","severity":1,"message":"156","line":109,"column":89,"nodeType":"157","messageId":"158","endLine":109,"endColumn":91},{"ruleId":"155","severity":1,"message":"156","line":116,"column":53,"nodeType":"157","messageId":"158","endLine":116,"endColumn":55},{"ruleId":"155","severity":1,"message":"156","line":116,"column":88,"nodeType":"157","messageId":"158","endLine":116,"endColumn":90},{"ruleId":"155","severity":1,"message":"156","line":120,"column":47,"nodeType":"157","messageId":"158","endLine":120,"endColumn":49},{"ruleId":"155","severity":1,"message":"156","line":120,"column":94,"nodeType":"157","messageId":"158","endLine":120,"endColumn":96},"no-native-reassign",["178"],"no-negated-in-lhs",["179"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.",["178"],["179"],["178"],["179"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'name'. Either include it or remove the dependency array. If 'setLocation' needs the current value of 'name', you can also switch to useReducer instead of useState and read 'name' in the reducer.","ArrayExpression",["180"],"'ListItemAvatar' is defined but never used.","'ListItemText' is defined but never used.","'TagIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchTags'. Either include it or remove the dependency array.",["181"],"no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'SettingsIcon' is defined but never used.","React Hook useEffect has missing dependencies: 'fetchTags' and 'tagId'. Either include them or remove the dependency array.",["182"],"'Avatar' is defined but never used.","'Button' is defined but never used.","'TextField' is defined but never used.","'SaveIcon' is defined but never used.","'apiAddTag' is defined but never used.","'apiGetData' is defined but never used.","'tags' is assigned a value but never used.","'setTags' is assigned a value but never used.","'name' is assigned a value but never used.","'setName' is assigned a value but never used.","'id' is assigned a value but never used.","'setId' is assigned a value but never used.",["183"],"'group' is assigned a value but never used.","'setGroup' is assigned a value but never used.",["184"],"no-global-assign","no-unsafe-negation",{"desc":"185","fix":"186"},{"desc":"187","fix":"188"},{"desc":"189","fix":"190"},{"desc":"187","fix":"191"},{"desc":"187","fix":"192"},"Update the dependencies array to be: [data, name]",{"range":"193","text":"194"},"Update the dependencies array to be: [fetchTags]",{"range":"195","text":"196"},"Update the dependencies array to be: [fetchTags, tagId]",{"range":"197","text":"198"},{"range":"199","text":"196"},{"range":"200","text":"196"},[519,525],"[data, name]",[2541,2543],"[fetchTags]",[2423,2425],"[fetchTags, tagId]",[2461,2463],[2531,2533]]